import { Tab } from '@headlessui/react';
import classNames from 'classnames';
import lqip from 'lqip-modern';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRef } from 'react';
import Masonry from 'react-masonry-css';

import nodeFetch from 'node-fetch';
import { createApi } from 'unsplash-js';

import type { LightGallery } from 'lightgallery/lightgallery';
import LightGalleryComponent from 'lightgallery/react';

import 'lightgallery/css/lg-thumbnail.css';
import 'lightgallery/css/lg-zoom.css';
import 'lightgallery/css/lightgallery.css';

// plugins
import lgThumbnail from 'lightgallery/plugins/thumbnail';
import lgZoom from 'lightgallery/plugins/zoom';

import bgModern from '../public/bgModern.jpg';

type Photo = {
  src: string,
  thumb: string,
  width: number,
  height: number,
  alt: string,
  blurDataURL: string,
}

const tabs = [
  {
    key: 'all',
    display: 'All',
  },
  {
    key: 'oceans',
    display: 'Oceans',
  },
  {
    key: 'forests',
    display: 'Forests',
  },
]

type HomeProps = {
  oceans: Photo[],
  forests: Photo[],
}

export const getStaticProps: GetStaticProps<HomeProps> = async () => {

  const unsplash = createApi({
    accessKey: process.env.UNSPLASH_ACCESS_KEY!,
    fetch: nodeFetch as unknown as typeof fetch,
  })  

  const [oceans, forests] = await Promise.all([
    getImages(unsplash, 'oceans'),
    getImages(unsplash, 'forests'),
  ])
  
  return ({
    props: {
      oceans,
      forests,
  }
})
}

export default function Home({oceans, forests}: HomeProps) {
  return (
    <div className="h-full overflow-auto">
      <Head>
        <title>Nature Canvas</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Image src={bgModern} alt='background-img' className='fixed top-0 left-0 z-0' placeholder='blur'/>
      <div className='fixed top-0 left-0 w-full h-full from-zinc-900 bg-gradient-to-t z-10'></div>

      <header className='fixed top-0 w-full z-30 flex justify-between items-center h-[90px] px-20 from-zinc-900 bg-gradient-to-b'>
        <span className='uppercase text-lg font-medium'>Nature Canvas</span>
        <Link href='#' className='rounded-3xl bg-white text-stone-700 px-6 py-2 hover:underline decoration-gray-400  hover:bg-opacity-90 '>
            Contact
        </Link>
      </header>
      <main className='relative pt-[120px] z-20'>
        <div className="flex flex-col items-center h-full">

      <Tab.Group>
      <Tab.List className='flex items-center gap-16'>
        {tabs.map(tab => (
        <Tab key={tab.key} className='p-2 uppercase'>
          {({selected}) => (<span className={classNames("uppercase text-lg", selected ? 'text-white' : 'text-stone-600')}>{tab.display}</span>)}
        </Tab>
        ))}
      </Tab.List>
      <Tab.Panels className='h-full max-w-[900px] w-full p-2 sm:p-4 my-6'>
        <Tab.Panel className='overflow-auto'>
          <Gallery photos={[...oceans, ...forests]}/>
        </Tab.Panel>
        <Tab.Panel>
          <Gallery photos={oceans}/>
        </Tab.Panel>
        <Tab.Panel>
          <Gallery photos={forests}/>
        </Tab.Panel>
      </Tab.Panels>
    </Tab.Group>

        </div>
      </main>
      <footer className='relative h-[60px] flex justify-center items-center py-2 sm:py-12 uppercase font-medium z-20'>
        <p>Nature Canvas</p>
      </footer>
    </div>
  );
}

type GalleryProps = {
  photos: Photo[],
}

function Gallery({photos}:GalleryProps) {
  const lightBoxRef = useRef<LightGallery | null>(null)
  return (
    <>
      <Masonry breakpointCols={2} className='flex gap-4' columnClassName=''>
       {photos.map((photo, i) => (
        <div className='relative'>
         <Image key={photo.src} src={photo.src} width={photo.width} height={photo.height} alt={photo.alt} className='my-4 rounded-lg' placeholder='blur' blurDataURL={photo.blurDataURL} 
        />
        <div className='absolute w-full h-full inset-0 bg-transparent hover:bg-stone-900 hover:opacity-10 cursor-pointer' onClick={() => {
          lightBoxRef.current?.openGallery(i)
        }}></div>
        </div>
          ))}
     </Masonry>
     <LightGalleryComponent onInit={ref => {
       if(ref) {
         lightBoxRef.current = ref.instance
       }
     }} speed={500} plugins={[lgThumbnail, lgZoom]} dynamic dynamicEl={photos.map(photo => ({
       src: photo.src,
       thumb: photo.src,
     }))}/> 
    </>
  )
}

async function getImages(cli: ReturnType<typeof createApi>, query:string): Promise<Photo[]> {
  const mapPhotos: Photo[] = []
  
  const photos = await cli.search.getPhotos({
    query,
  })

  if(photos.type === 'success') {
    const photoArr = photos.response.results.map((photo, i) => ({
        src: photo.urls.full,
        thumb: photo.urls.thumb,
        width: photo.width,
        height: photo.height,
        alt: photo.alt_description ?? `img-${i}`,
      }))

      const photosArrWithDataURL: Photo[] = []

      for(const photo of photoArr) {
        const blurDataURL = await getDataUrl(photo.src)
        photosArrWithDataURL.push({...photo, blurDataURL})
      }
      mapPhotos.push(...photosArrWithDataURL)
    } else {
      console.error('ERROR: Could not get photo');
    }
    
    return mapPhotos
  }
  
  async function getDataUrl(url: string) {
    const imgData = await fetch(url)

    const arrayBufferData = await imgData.arrayBuffer()
    const lqipData = await lqip(Buffer.from(arrayBufferData))
    
    return lqipData.metadata.dataURIBase64
}